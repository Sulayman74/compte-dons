generator client {
  provider = "prisma-client-js"
}

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  action          Action         @default(READ)
  createdAt       DateTime       @default(now())
  email           String         @unique
  firstname       String
  id              String         @id @default(uuid())
  isAuthenticated Boolean        @default(false)
  lastname        String
  password        String
  phoneNumber     String
  role            Role           @default(USER)
  destinataires   Destinataire[]
  donations       Donation[]
}

model Destinataire {
  city        String?
  country     String?
  email       String?
  firstname   String
  id          String     @id @default(uuid())
  isFamily    Boolean
  lastname    String
  phoneNumber String?
  street      String?
  zipcode     String?
  userId      String?
  user        User?      @relation(fields: [userId], references: [id])
  donation    Donation[]
}

model Donation {
  amount         Int
  archived       Boolean
  archiveId      Int?
  createdAt      DateTime     @default(now())
  destinataireId String
  id             String       @id @default(uuid())
  userId         String?
  archiveIn      Archive?     @relation(fields: [archiveId], references: [id])
  destinataire   Destinataire @relation(fields: [destinataireId], references: [id])
  user           User?        @relation(fields: [userId], references: [id])
}

model Archive {
  archivedAt DateTime   @default(now())
  id         Int        @id @default(autoincrement())
  donations  Donation[]
}

enum Role {
  ADMIN
  USER
}

enum Action {
  MANAGE
  CREATE
  READ
  UPDATE
  DELETE
}
